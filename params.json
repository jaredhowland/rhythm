{"name":"Rhythm","tagline":"Sass files to create a vertical rhythm based on modular scales","body":"Rhythm\r\n======\r\nRhythm is a small set of [Sass files][1] built to assist in creating [mobile-first][8], [responsive websites][8] with [vertical rhythm][2] using [modular scales][3]. Rhythm aims to assist you in creating well-designed websites that work as well on mobile devices as they do on large desktops.\r\n\r\nInstallation\r\n============\r\nRhythm is available as a [Composer][9] [package][10], but you can also manually download it and include it in your project.\r\n\r\nComposer\r\n--------\r\n1. If you have not done so already, install [Composer][9]\r\n\r\n2. Update your project's `composer.json` file to require Rhythm:\r\n\r\n    ```json\r\n    {\r\n      \"require\": {\r\n        \"jaredhowland/rhythm\": \"~1.0\"\r\n      }\r\n    }\r\n    ```\r\n\r\n3. SCSS: `@import \"path/to/vendor/jaredhowland/rhythm/src/rhythm\";`\r\n\r\nManual Installation\r\n-------------------\r\n1. [Download the latest `.zip` file][11].\r\n2. Extract into your project.\r\n3. SCSS: `@import \"rhythm\";`\r\n\r\nUsage\r\n=====\r\nIncluding Rhythm with your Sass files automatically generates a vertical rhythm using modular scales for multiple breakpoints based on the values defined in `_variables.scss`. To change the defaults, redefine the variables before importing Rhythm.\r\n\r\nAny time an element's vertical properties are changed, you must offset this change to maintain a vertical rhythm. The major properties that change an element's vertical rhythm include:\r\n\r\n* `font-size`\r\n* `line-height`\r\n* `margin-top` and `margin-bottom`\r\n* `padding-top` and `padding-bottom`\r\n\r\nUse Rhythm any time you want to adjust those properties and it will perform the mathematical acrobatics required to restore the vertical rhythm to your site.\r\n\r\nAdjusting Vertical Properties\r\n=============================\r\n**All of the examples assume you have not changed any of the default variables.**\r\n\r\nFont Sizes\r\n----------\r\nTo adjust the font-size of an element across all breakpoints, use the `font-size` mixin:\r\n\r\n```scss\r\np {\r\n  @include font-size(14px);\r\n}\r\n```\r\n\r\nThis will generate the following:\r\n\r\n```css\r\np {\r\n  font-size: 0.875rem;\r\n  line-height: 1.3125rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    font-size: 0.875rem;\r\n    line-height: 1.6875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    font-size: 0.875rem;\r\n    line-height: 2rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    font-size: 0.875rem;\r\n    line-height: 2.25rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    font-size: 0.875rem;\r\n    line-height: 2.4375rem\r\n  }\r\n}\r\n```\r\n\r\nAll Rhythm mixins and variables can accept any combination of the following units: `px`, `%`, or `rem`.\r\n\r\nTo set a different `font-size` for each breakpoint, use a list of all `font-size`s that is the same length as the number of defined breakpoints.\r\n\r\n```scss\r\np {\r\n  @include font-size(10px 12px 13px 14px 16px);\r\n}\r\n```\r\n\r\nThis will generate the following:\r\n\r\n```css\r\np {\r\n  font-size: 0.625rem;\r\n  line-height: 1.3125rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    font-size: 0.75rem;\r\n    line-height: 1.6875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    font-size: 0.8125rem;\r\n    line-height: 2rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    font-size: 0.875rem;\r\n    line-height: 2.25rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    font-size: 1rem;\r\n    line-height: 2.4375rem\r\n  }\r\n}\r\n```\r\n\r\nAlternatively, you can use the `font-size`s defined in your modular scale.\r\n\r\n```scss\r\nh2 {\r\n  @include font-size($h3);\r\n}\r\n```\r\n\r\nOr\r\n\r\n```scss\r\nh2 {\r\n  @include font-size($gamma);\r\n}\r\n```\r\n\r\nThis will generate the following:\r\n\r\n```css\r\nh2 {\r\n  font-size: 1.125rem;\r\n  line-height: 1.3125rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  h2 {\r\n    font-size: 1.25rem;\r\n    line-height: 1.6875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  h2 {\r\n    font-size: 1.375rem;\r\n    line-height: 2rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  h2 {\r\n    font-size: 1.5rem;\r\n    line-height: 2.25rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  h2 {\r\n    font-size: 1.625rem;\r\n    line-height: 2.4375rem\r\n  }\r\n}\r\n```\r\n\r\n**Not Recommended**: If you have an element that you would like to set the `font-size` for but not the `line-height`, you can do the following:\r\n\r\n```scss\r\nspan {\r\n  @include font-size($epsilon, true);\r\n}\r\n```\r\n\r\nThis will generate the following:\r\n\r\n```css\r\nspan {\r\n  font-size: 0.875rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  span {\r\n    font-size: 0.8125rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  span {\r\n    font-size: 0.875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  span {\r\n    font-size: 0.9375rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  span {\r\n    font-size: 1rem\r\n  }\r\n}\r\n```\r\n\r\nChanging the `font-size` without also changing the `line-height` runs the very real risk of throwing off your vertical scale.\r\n\r\nLine Heights\r\n------------\r\nNormally, if you adjust the `line-height` you will also want to adjust the `font-size` and line length. However, if the modular scale is crowding an element and you want to increase the `line-height`, you must do it using a multiple of the generated `line-height`. Use the `line-height` mixin to do this.\r\n\r\nTo maintain a vertical rhythm, `line-height` is calculated based on a given `font-size`. The mixin requires the `font-size`(s) and the scale value you would like to increase the line-height by:\r\n\r\n```scss\r\nh2 {\r\n  @include line-height($h2, 2);\r\n}\r\n```\r\n\r\nThis will generate the following:\r\n\r\n```css\r\nh2 {\r\n  line-height: 2.625rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  h2 {\r\n      line-height: 3.375rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  h2 {\r\n    line-height: 4rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  h2 {\r\n    line-height: 4.5rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  h2 {\r\n    line-height: 4.875rem\r\n  }\r\n}\r\n```\r\n\r\nYou can pass a single `font-size` or the same number of `font-size`s as there are defined breakpoints.\r\n\r\nMargins\r\n-------\r\nBecause Rhythm includes v2.0 of Eric Meyer's [reset stylesheet][12], all margins are defaulted to `0`. Use the `margin`, `margin-top`, and `margin-bottom` mixins to adjust the margins. The mixins require you to define the scale value by which you would like the margin to be increased.\r\n\r\n###margin()\r\nThe `margin()` mixin behaves just like the CSS `margin`. You can pass one, two, three, or four scale values:\r\n\r\n```scss\r\np {\r\n  @include margin(1);\r\n}\r\n```\r\n\r\nOr\r\n\r\n```scss\r\np {\r\n  @include margin(1 0);\r\n}\r\n```\r\n\r\nOr\r\n\r\n```scss\r\np {\r\n  @include margin(1 3 2);\r\n}\r\n```\r\n\r\nOr\r\n\r\n```scss\r\np {\r\n  @include margin(1 1 0 0);\r\n}\r\n```\r\n\r\nThis will generate the following:\r\n\r\n```css\r\np {\r\n  margin: 1.3125rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    margin: 1.6875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    margin: 2rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    margin: 2.25rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    margin: 2.4375rem\r\n  }\r\n}\r\n```\r\n\r\nOr\r\n\r\n```css\r\np {\r\n  margin: 1.3125rem 0rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    margin: 1.6875rem 0rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    margin: 2rem 0rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    margin: 2.25rem 0rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    margin: 2.4375rem 0rem\r\n  }\r\n}\r\n```\r\n\r\nOr\r\n\r\n```css\r\np {\r\n  margin: 1.3125rem 3.9375rem 2.625rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    margin: 1.6875rem 5.0625rem 3.375rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    margin: 2rem 6rem 4rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    margin: 2.25rem 6.75rem 4.5rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    margin: 2.4375rem 7.3125rem 4.875rem\r\n  }\r\n}\r\n```\r\n\r\nOr\r\n\r\n```css\r\np {\r\n  margin: 1.3125rem 1.3125rem 0rem 0rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    margin: 1.6875rem 1.6875rem 0rem 0rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    margin: 2rem 2rem 0rem 0rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    margin: 2.25rem 2.25rem 0rem 0rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    margin: 2.4375rem 2.4375rem 0rem 0rem\r\n  }\r\n}\r\n```\r\n\r\n### margin-top() and margin-bottom()\r\nThe `margin-top()` and `margin-bottom()` mixins work just as you would expect:\r\n\r\n```scss\r\np {\r\n  @include margin-top(2);\r\n  @include margin-bottom(1);\r\n}\r\n```\r\n\r\nThis would generate the following:\r\n\r\n```css\r\np {\r\n  margin-top: 2.625rem;\r\n  margin-bottom: 1.3125rem\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    margin-top: 3.375rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    margin-top: 4rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    margin-top: 4.5rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    margin-top: 4.875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 30rem) {\r\n  p {\r\n    margin-bottom: 1.6875rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 48rem) {\r\n  p {\r\n    margin-bottom: 2rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 62rem) {\r\n  p {\r\n    margin-bottom: 2.25rem\r\n  }\r\n}\r\n\r\n@media screen and (min-width: 75rem) {\r\n  p {\r\n    margin-bottom: 2.4375rem\r\n  }\r\n}\r\n```\r\n\r\nTo set the `margin-right` and `margin-left` individually, just use CSS.\r\n\r\nPadding\r\n-------\r\nThe `padding()`, `padding-top()`, and `padding-bottom()` mixins work exactly like the corresponding `margin` mixins.\r\n\r\nVariables\r\n=========\r\nThe following variables (shown with their default values) can be redefined before importing Rhythm:\r\n\r\n```scss\r\n/*------------------------------------------------------------ */\r\n/* Breakpoints\r\n-------------------------------------------------------------- */\r\n\r\n$breakpoints: (\r\n  bp-0: (\r\n    breakpoint: 0px, // Mobile first\r\n    font-size: 16px 18px,\r\n    modular-scale: perfect-fourth\r\n  ),\r\n  bp-1: (\r\n    breakpoint: 480px, // ~ Extra small screen up\r\n    font-size: 18px 20px,\r\n    modular-scale: perfect-fifth\r\n  ),\r\n  bp-2: (\r\n    breakpoint: 768px, // ~ Small screen/tablet up\r\n    font-size: 20px 22px,\r\n    modular-scale: golden\r\n  ),\r\n  bp-3: (\r\n    breakpoint: 992px, // ~ Medium screen up\r\n    font-size: 22px 24px,\r\n    modular-scale: golden\r\n  ),\r\n  bp-4: (\r\n    breakpoint: 1200px, // ~Desktop up\r\n    font-size: 24px 26px,\r\n    modular-scale: golden\r\n  )\r\n);\r\n\r\n/*------------------------------------------------------------ */\r\n/* Fonts\r\n-------------------------------------------------------------- */\r\n\r\n// Serif fonts.\r\n$serif-font-family: 'Georgia, serif';\r\n\r\n// Sans-serif fonts.\r\n$sans-serif-font-family: 'Helvetica, sans-serif';\r\n\r\n// Monospace fonts.\r\n$monospace-font-family: 'Menlo, monospace';\r\n\r\n// Default font types.\r\n$body-font:      unquote($serif-font-family);\r\n$heading-font:   unquote($serif-font-family);\r\n$monospace-font: unquote($monospace-font-family);\r\n\r\n/*------------------------------------------------------------ */\r\n/* Typography\r\n-------------------------------------------------------------- */\r\n\r\n// Indent value for paragraphs\r\n$indent-value: 1rem;\r\n\r\n// Drop caps.\r\n$dropcap-float-position: left;\r\n$dropcap-font-size:      4em;\r\n$dropcap-font-family:    inherit;\r\n$dropcap-txt-indent:     0;\r\n$dropcap-margin:         10px 10px 0 0;\r\n$dropcap-padding:        0 20px;\r\n$dropcap-color:          inherit;\r\n$dropcap-line-height:    1;\r\n$dropcap-bg:             transparent;\r\n\r\n/*------------------------------------------------------------ */\r\n/* Colors\r\n-------------------------------------------------------------- */\r\n\r\n// Background colors.\r\n$background-color:      #F5F5F5;\r\n$code-background-color: #F5F4F2;\r\n\r\n// Text colors.\r\n$heading-color:         #2E2E2E;\r\n$body-color:            #444444;\r\n$body-color-muted:      #CCCCCC;\r\n$link-color:            #265C83;\r\n$link-hover-color:      lighten($link-color, 10%);\r\n$link-background-color: transparent;\r\n```\r\n\r\n*Modular Scales*. When you first call Rhythm, a modular scale is generated for you based on the `$breakpoint` values you have defined. You can use multiple base `font-size`s to create a more robust [scale][5]. It is recommended that you use no more than two `font-size`s to generate the scale but Rhythm will accept as many as you give it. Scale options include:\r\n\r\n  * `golden`\r\n  * `minor-second`\r\n  * `major-second`\r\n  * `minor-third`\r\n  * `major-third`\r\n  * `perfect-fourth`\r\n  * `augmented-fourth`\r\n  * `perfect-fifth`\r\n  * `minor-sixth`\r\n  * `major-sixth`\r\n  * `minor-seventh`\r\n  * `major-seventh`\r\n  * `octave`\r\n  * `major-tenth`\r\n  * `major-eleventh`\r\n  * `major-twelfth`\r\n  * `double-octave`\r\n\r\nTo create a custom scale, create a `$modular-scales` map before importing Rhythm:\r\n\r\n```scss\r\n$modular-scales: (my-scale: 2.3, my-scale-2: 2.4);\r\n```\r\n\r\nThen, redefine your `$breakpoints` variable to use your new scale:\r\n\r\n```scss\r\n$breakpoints: (\r\n  bp-0: (\r\n    breakpoint: 0px, // Mobile first\r\n    font-size: 16px 18px,\r\n    modular-scale: my-scale\r\n  )\r\n);\r\n```\r\n\r\nRhythm also creates lists for every breakpoint for various font sizes based on the selected modular scale. The Rhythm implementation of this closely resembles the one found in the article \"[Pragmatic, Practical Font Sizing in CSS][6].\" Specifically, it sets the following variables from largest font size to smallest:\r\n\r\n  * `$tera`\r\n  * `$giga`\r\n  * `$mega`\r\n  * `$alpha`, `$h1`\r\n  * `$beta`, `$h2`\r\n  * `$gamma`, `$h3`\r\n  * `$delta`, `$h4`\r\n  * `$epsilon`, `$h5`\r\n  * `$zeta`, `$h6`\r\n\r\nFor example, if you want to set your `h1`'s `font-size` to be one scale down from the default, you can do the following:\r\n\r\n```scss\r\nh1 {\r\n  @include font-size($h2);\r\n}\r\n```\r\n\r\n[1]:  http://sass-lang.com/\r\n[2]:  http://24ways.org/2006/compose-to-a-vertical-rhythm\r\n[3]:  http://alistapart.com/article/more-meaningful-typography\r\n[4]:  http://necolas.github.io/normalize.css/\r\n[5]:  http://modularscale.com/scale/?px1=18&px2=27&ra1=1.5&ra2=0\r\n[6]:  http://csswizardry.com/2012/02/pragmatic-practical-font-sizing-in-css/\r\n[7]:  http://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/\r\n[8]:  http://bradfrost.com/blog/web/mobile-first-responsive-web-design/\r\n[9]:  https://getcomposer.org\r\n[10]: http://packagist.org/\r\n[11]: https://github.com/jaredhowland/rhythm/releases/latest\r\n[12]: http://meyerweb.com/eric/tools/css/reset/\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}