// https://gist.github.com/jlong/8760275
// map-fetch($map, $keys)
//
// An easy way to fetch a deep value in a multi-level map. Works much like
// map-get() except that you pass multiple keys as the second parameter to
// go down multiple levels in the nested map.
//
@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);
  @if ($length > 1) {
    $rest: ();
    @for $i from 2 through $length {
      $rest: append($rest, nth($keys, $i))
    }
    @return map-fetch($value, $rest)
  } @else {
    @return $value;
  }
}

@function add-custom-scale($name, $value) {
  // Warn if $name is an existing $modular-scales key.
  @if map-has-key($modular-scales, $name) {
    @warn "`#{$name}` is already used and cannot be reused. Use the `add-custom-scale` function to create a custom scale. $modular-scale variable will be set to `#{map-get($modular-scales, $name)}`.";
  // Otherwise, add custom $name and the unitless $value to the $modular-scales map.
  } @else {
    $modular-scales: map-merge($modular-scales, ($name: to-unitless($value))) !global;
  }
  @return $name;
}

@function modular-scale($scale-name) {
  // If $scale-name is a number, return $scale-name as a unitless value.
  @if(type-of($scale-name) == number) {
    @warn "`#{$scale-name}` is not a valid value for $modular-scale variable. `#{to-unitless($scale-name)}` will be used as the modular scale (`#{$scale-name}` converted into unitless rem equivalent). Use the `add-custom-scale` function to add a custom scale.";
    @return to-unitless($scale-name);
  // Check to see if $scale-name is a valid value. Return the value of $scale-name if it is valid.
  } @else if map-has-key($modular-scales, unquote($scale-name)) {
    @return map-get($modular-scales, $scale-name);
  // Otherwise, return the golden ratio scale (1.618).
  } @else {
    @warn "`#{$scale-name}` is not a valid value for $modular-scale variable. `golden` was used instead. Use the `add-custom-scale` function to add a custom scale.";
    @return map-get($modular-scales, golden); // default to golden ratio if invalid
  }
}

@function line-width($font-size, $line-height: $modular-scale) {
  // http://www.pearsonified.com/2011/12/golden-ratio-typography.php
  // (font-size (in px) * line-height)^2
  $font-size: strip-units(to-px($font-size));
  @return #{pow(($font-size * $line-height), 2)}px;
}

@function get-font-size($breakpoint-name) {
  @return to-rem(map-fetch($breakpoints, $breakpoint-name font-size));
}

@function get-line-height($breakpoint-name) {
  @return modular-scale(map-fetch($breakpoints, $breakpoint-name modular-scale));
}
