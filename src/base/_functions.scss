// https://gist.github.com/jlong/8760275
// map-fetch($map, $keys)
//
// An easy way to fetch a deep value in a multi-level map. Works much like
// map-get() except that you pass multiple keys as the second parameter to
// go down multiple levels in the nested map.
//
@function map-fetch($map, $keys) {
  $key: nth($keys, 1);
  $length: length($keys);
  $value: map-get($map, $key);
  @if ($length > 1) {
    $rest: ();
    @for $i from 2 through $length {
      $rest: append($rest, nth($keys, $i))
    }
    @return map-fetch($value, $rest)
  } @else {
    @return $value;
  }
}

@function add-custom-scale($name, $value) {
  // Warn if $name is an existing $modular-scales key.
  @if map-has-key($modular-scales, $name) {
    @warn "`#{$name}` is already defined and cannot be reused. Use the `add-custom-scale` function to create a custom scale. $modular-scale variable will be set to `#{map-get($modular-scales, $name)}`.";
  // Otherwise, add custom $name and the unitless $value to the $modular-scales map.
  } @else {
    $modular-scales: map-merge($modular-scales, ($name: to-unitless($value))) !global;
  }
  @return $name;
}

@function modular-scale-value($scale-name) {
  // If $scale-name is a number, return $scale-name as a unitless value.
  @if(type-of($scale-name) == number) {
    @warn "`#{$scale-name}` is not a valid value for $modular-scale variable. `#{to-unitless($scale-name)}` will be used as the modular scale (`#{$scale-name}` converted into unitless rem equivalent). Use the `add-custom-scale` function to add a custom scale.";
    @return to-unitless($scale-name);
  // Check to see if $scale-name is a valid value. Return the value of $scale-name if it is valid.
  } @else if map-has-key($modular-scales, unquote($scale-name)) {
    @return map-get($modular-scales, $scale-name);
  // Otherwise, return the golden ratio scale (1.618).
  } @else {
    @warn "`#{$scale-name}` is not a valid value for $modular-scale variable. `golden` was used instead. Use the `add-custom-scale` function to add a custom scale.";
    @return map-get($modular-scales, golden); // default to golden ratio if invalid
  }
}

@function create-scale($font-sizes, $modular-scale: golden) {
  $modular-scale: modular-scale-value($modular-scale);
  $scale-values: ();

  @each $font-size in $font-sizes {
    $scale: create-scale-values($font-size, $modular-scale); // returns 9 font-sizes on the same modular scale
    $scale-values: sort-list(append($scale, $scale-values));
  }

  @if length($scale-values) > 9 {
    $scale-values:       remove-duplicates($scale-values);
    $base-font-size:     to-px(nth($font-sizes, 1));
    $base-font-location: index($scale-values, $base-font-size);

    $first-value: $base-font-location - 2;
    $last-value: $base-font-location + 6;

    $scale-values: slice($scale-values, $first-value, $last-value);
  }

  @return $scale-values;
}

@function create-scale-values($font-size, $modular-scale) {
  $font-size:    to-px($font-size);
  $scale-values: $font-size;

  // larger font than base size (8 values)
  $i: 1;
  @while $i < 7 {
    $ms: pow($modular-scale, $i);
    $scale-values: append($scale-values, round($font-size * $ms));
    $i: $i + 1;
  }

  // smaller font than base size (1 value)
  $j: -2;
  @while $j < 0 {
    $ms: pow($modular-scale, abs($j));
    $scale-values: append($scale-values, round($font-size / $ms));
    $j: $j + 1;
  }

  @return $scale-values; // 9 values
}

@function line-height($font-size, $base-font-size, $base-line-height) {
  $font-size:        to-px($font-size);
  $base-font-size:   to-px($base-font-size);
  $base-line-height: to-px($base-line-height);
  $multiplier:       ceil($font-size / $base-line-height); // must be whole integer multiple of $base-line-height so line-height is greater than the font-size
  @if $base-font-size == $font-size {
    @return to-unitless($base-line-height);
  }
  @return ($base-line-height / $font-size) * $multiplier;
}

@function line-width($font-size, $line-height) {
  // http://www.pearsonified.com/2011/12/golden-ratio-typography.php
  // (font-size (in px) * line-height)^2
  $font-size: strip-units(to-px($font-size));
  @return pow(($font-size * $line-height), 2) * 1px;
}

@function get-font-sizes($breakpoint-name) {
  @return map-fetch($breakpoints, $breakpoint-name font-size);
}

@function get-line-height($breakpoint-name) {
  @return modular-scale-value(map-fetch($breakpoints, $breakpoint-name modular-scale));
}

@function get-bp-names() {
  @return map-keys($breakpoints);
}

@function bp-name($i) {
  @return nth(get-bp-names(), $i);
}

@function get-bp-data($i) {
  @return nth(nth($breakpoints, $i), 2); // $breakpoints is a nested map. Bypass the name of the breakpoint and get to its properties.
}

@function bp-size($i) {
  @return map-get(get-bp-data($i), breakpoint);
}

@function bp-font-sizes($i) {
  @return map-get(get-bp-data($i), font-size);
}

@function bp-scale($i) {
  @return map-get(get-bp-data($i), modular-scale);
}

@function bp-base-font-size($i) {
  @return nth(bp-font-sizes($i), 1);
}

@function bp-base-line-height($i) {
  @return round(modular-scale-value(bp-scale($i)) * to-px(bp-base-font-size($i)));
}

@function bp-scale-values($i) {
  @return create-scale(bp-font-sizes($i), bp-scale($i));
}
