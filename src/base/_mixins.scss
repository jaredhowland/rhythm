/*------------------------------------------------------------ */
/* Mixins
-------------------------------------------------------------- */

@mixin rhythm() {
  // Loop through all breakpoints.
  @for $i from 1 through length($breakpoints) {
    @if $i == 1 {
      @include set-sizes($i);
    } @else {
      @include breakpoint(bp-name($i)) {
        @include set-sizes($i);
      }
    }
  }
}

// $i is breakpoint number (1 through number of breakpoints defined in $breakpoints map)
@mixin set-sizes($i) {
  $base-font-size:         bp-base-font-size($i);
  $base-line-height:       bp-base-line-height($i);
  $base-line-height-ratio: bp-base-line-height-ratio($i);
  $scale-values:           bp-scale-values($i);

  font-size:   to-rem($base-font-size);
  line-height: $base-line-height-ratio;

  @at-root .tera {
    $tera: to-rem(nth($scale-values, 9));
    font-size: $tera;
    line-height: line-height($tera, $i);
  }
  @at-root .giga {
    $giga: to-rem(nth($scale-values, 8));
    font-size: $giga;
    line-height: line-height($giga, $i);
  }
  @at-root .mega {
    $mega: to-rem(nth($scale-values, 7));
    font-size: $mega;
    line-height: line-height($mega, $i);
    // line-height: line-height($mega, $base-font-size, $base-line-height);
  }
  @at-root h1, .h1, .alpha {
    $alpha: to-rem(nth($scale-values, 6));
    font-size: $alpha;
    line-height: line-height($alpha, $i);
  }
  @at-root h2, .h2, .beta {
    $beta: to-rem(nth($scale-values, 5));
    font-size: $beta;
    line-height: line-height($beta, $i);
  }
  @at-root h3, .h3, .gamma {
    $gamma: to-rem(nth($scale-values, 4));
    font-size: $gamma;
    line-height: line-height($gamma, $i);
  }
  @at-root h4, .h4, .delta {
    $delta: to-rem(nth($scale-values, 3));
    font-size: $delta;
    line-height: line-height($delta, $i);
  }
  @at-root h5, .h5, .epsilon {
    $epsilon: to-rem(nth($scale-values, 2));
    font-size: $epsilon;
    line-height: line-height($epsilon, $i);
  }
  @at-root h6, .h6, .zeta {
    $zeta: to-rem(nth($scale-values, 1));
    font-size: $zeta;
    line-height: line-height($zeta, $i);
  }

  @at-root section, .section {
    margin: 0 auto;
    max-width: to-rem(max-line-width($base-font-size, $base-line-height-ratio));
  }
}

// Breakpoints.
// Parts based on https://gist.github.com/timknight/03e6335b8816aa534cf7 and
// https://github.com/designbyjake/sassline/blob/master/assets/sass/base/_mixins.scss
@mixin breakpoint($breakpoint-name: all) {
  // Type of break variable
  $value: type-of($breakpoint-name);

  // If it is a string (i.e. a breakpoint variable).
  @if $value == string {
    // If using 'bp-1', 'bp-2' etc output the correct breakpoints from map.
    @if map-has-key($breakpoints, $breakpoint-name) {
      $breakpoints: map-get($breakpoints, $breakpoint-name);
      @if map-has-key($breakpoints, breakpoint) {
        @media screen and (min-width: #{to-rem(map-get($breakpoints, breakpoint))} ) { @content; }
      } @else {
        @warn "#{$breakpoint-name} does not have a defined `breakpoint` value.";
      }
    } @else if $breakpoint-name == all {
      @media all { @content; }
    } @else {
      @warn "`#{$breakpoint-name}` is not valid to use as a breakpoint. `all` was used instead.";
      @media all { @content; }
    }

  // If it is a number, use this for the breakpoint.
  } @else if $value == number {
    @media screen and (min-width: #{to-px($breakpoint-name)}) { @content; }
  } @else {
    @warn "`#{$breakpoint-name}` is not valid to use as a breakpoint. `all` was used instead";
    @media all { @content; }
  }
}

@mixin font-size($font-size) {
  $multiplier: round(to-px($font-size) / to-px(bp-base-font-size(1))); // keep roughly the same proportions across breakpoints
  @for $i from 1 through length($breakpoints) {
    @if $i == 1 {
      font-size:   to-rem($font-size);
      line-height: line-height($font-size, bp-base-font-size($i), bp-base-line-height($i));
    } @else {
      @include breakpoint(bp-name($i)) {
        $font-size: to-rem(to-px(bp-base-font-size($i)) * $multiplier);
        font-size: $font-size;
        line-height: line-height($font-size, bp-base-font-size($i), bp-base-line-height($i));
      }
    }
  }
}

@mixin padding($padding) {

}

@mixin margin($margin) {

}
