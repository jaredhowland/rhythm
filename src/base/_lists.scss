// http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
@function first($list) {
  @return nth($list, 1);
}

@function last($list) {
  @return nth($list, length($list));
}

@function prepend($list, $value) {
  @return join($value, $list);
}

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;
  @if type-of($start) != number or type-of($end) != number {
    @warn 'Either $start or $end are not a number for `slice`.';
  } @else if $start > $end {
    @warn 'The start index has to be lesser than or equals to the end index for `slice`.';
  } @else if $start < 1 or $end < 1 {
    @warn 'List indexes must be non-zero integers for `slice`.';
  } @else if $start > length($list) {
    @warn 'List index is #{$start} but list is only #{length($list)} item long for `slice`.';
  } @else if $end > length($list) {
    @warn 'List index is #{$end} but list is only #{length($list)} item long for `slice`.';
  } @else {
    $result: ();
    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @warn '$index: #{quote($index)} is not a number for `remove-nth`.';
  } @else if $index == 0 {
    @warn 'List index 0 must be a non-zero integer for `remove-nth`.';
  } @else if abs($index) > length($list) {
    @warn 'List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.';
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }

  }

  @return $result;
}

// http://hugogiraudel.com/2013/10/09/advanced-sass-list-functions-again/
@function remove-duplicates($list, $recursive: false) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      @if length($item) > 1 and $recursive {
        $result: append($result, remove-duplicates($item, $recursive));
      } @else {
        $result: append($result, $item);
      }
    }
  }

  @return $result;
}

// https://github.com/at-import/modular-scale/blob/2.x/stylesheets/modular-scale/_sort-list.scss
// List sorting via a modified merge-sort algorithmn
// http://en.wikipedia.org/wiki/Merge_sort
@function merge($a, $b) {
  $return: ();
  // Some empty lists get passed through so just pass the other list throguh
  @if length($a) == 0 {
    @return $b;
  }
  // If lists fit next to each other, just merge them
  // This helps performance skipping the need to check each value
  @if nth($a, length($a)) < nth($b, 1) {
    @return join($a, $b);
  }
  @if nth($b, length($b)) < nth($a, 1) {
    @return join($b, $a);
  }
  // Counters start at 1
  $a-counter: 1;
  $b-counter: 1;
  // Start looping through all numbers in array
  @while $a-counter <= length($a) and $b-counter <= length($b) {
    // Check if the A value is smaller
    // Uses or equal to avoid duplicate numbers
    @if nth($a, $a-counter) <= nth($b, $b-counter) {
      $return: join($return, nth($a, $a-counter));
      $a-counter: $a-counter + 1;
    } @elseif nth($a, $a-counter) > nth($b, $b-counter) { // Check if the B value is smaller
      $return: join($return, nth($b, $b-counter));
      $b-counter: $b-counter + 1;
    }
  }
  // Run through remainder values in the list
  @while $a-counter <= length($a) {
    $current: nth($a, $a-counter);
    @if $current != nth($return, length($return)) {
      $return: join($return, $current);
    }
    $a-counter: $a-counter + 1;
  }
  @while $b-counter <= length($b) {
    $current: nth($b, $b-counter);
    @if $current != nth($return, length($return)) {
      $return: join($return, $current);
    }
    $b-counter: $b-counter + 1;
  }
  // Done! return is now sorted and complete
  @return $return;
}

// Pull it all together
@function sort-list($lists) {
  $return: ();
  @each $list in $lists {
    @if $return == () {
      $return: $list;
    } @else {
      $return: merge($list, $return);
    }
  }
  // final cleanup of repeated items
  $last: null;
  $new-list: ();
  @each $item in $return {
    @if $item != $last {
      $new-list: join($new-list, $item);
    }
    $last: $item;
  }
  $return: $new-list;
  @return $return;
}
